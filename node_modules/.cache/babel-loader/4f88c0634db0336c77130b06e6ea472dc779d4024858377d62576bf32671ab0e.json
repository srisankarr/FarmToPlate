{"ast":null,"code":"var _jsxFileName = \"D:\\\\clgproject\\\\src\\\\provider\\\\AuthProvider.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// AuthProvider.js\nimport React, { createContext, useContext, useState } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const useAuth = () => {\n  _s();\n  return useContext(AuthContext);\n};\n_s(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUser] = useState(null);\n  const [message, setmessage] = useState('');\n  const [isLoggedIn, SetisLoggedIn] = useState('false');\n  const login = async credentials => {\n    try {\n      // Make a POST request to your backend login endpoint with the provided credentials\n      const response = await axios.post('http://localhost:5000/api/login', credentials);\n      // Assuming the response contains user data upon successful login\n      setUser(response.data.user);\n      setmessage(response.data.message);\n      SetisLoggedIn('true');\n    } catch (error) {\n      console.error('Login error:', error);\n      setmessage(null);\n      // Handle login error (e.g., display error message to the user)\n      SetisLoggedIn('false');\n    }\n  };\n  const signup = async userData => {\n    try {\n      // Make a POST request to your backend signup endpoint with the provided user data\n      const response = await axios.post('http://localhost:5000/api/signup', userData);\n      // Assuming the response contains user data upon successful signup\n      setUser(response.data.user);\n      setmessage(response.data.message);\n      console.log(response.data.message);\n    } catch (error) {\n      console.error('Signup error:', error);\n      setmessage(null);\n      // Handle signup error (e.g., display error message to the user)\n    }\n  };\n  const logout = async () => {\n    try {\n      // Make a POST request to your backend logout endpoint to invalidate the user session\n      await axios.post('http://localhost:5000/api/logout');\n      // Clear the user state upon successful logout\n      setUser(null);\n      SetisLoggedIn('false');\n    } catch (error) {\n      console.error('Logout error:', error);\n      // Handle logout error (e.g., display error message to the user)\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      login,\n      signup,\n      logout,\n      message,\n      isLoggedIn\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"AqUrZOhZ6rn2v0aNN59FCrsH5Sw=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","axios","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","AuthProvider","children","_s2","user","setUser","message","setmessage","isLoggedIn","SetisLoggedIn","login","credentials","response","post","data","error","console","signup","userData","log","logout","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/clgproject/src/provider/AuthProvider.js"],"sourcesContent":["// AuthProvider.js\r\nimport React, { createContext, useContext, useState } from 'react';\r\nimport axios from 'axios';\r\n\r\nconst AuthContext = createContext();\r\n\r\nexport const useAuth = () => useContext(AuthContext);\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [user, setUser] = useState(null);\r\n  const [message,setmessage]=useState('');\r\n  const [isLoggedIn,SetisLoggedIn]=useState('false');\r\n\r\n  const login = async (credentials) => {\r\n    try {\r\n      // Make a POST request to your backend login endpoint with the provided credentials\r\n      const response = await axios.post('http://localhost:5000/api/login', credentials);\r\n      // Assuming the response contains user data upon successful login\r\n      setUser(response.data.user);\r\n      setmessage(response.data.message);\r\n      SetisLoggedIn('true');\r\n     \r\n    } catch (error) {\r\n      console.error('Login error:', error);\r\n      setmessage(null);\r\n      // Handle login error (e.g., display error message to the user)\r\n      SetisLoggedIn('false');\r\n     \r\n    }\r\n  };\r\n\r\n  const signup = async (userData) => {\r\n    try {\r\n      // Make a POST request to your backend signup endpoint with the provided user data\r\n      const response = await axios.post('http://localhost:5000/api/signup', userData);\r\n      // Assuming the response contains user data upon successful signup\r\n      setUser(response.data.user);\r\n      setmessage(response.data.message);\r\n      console.log(response.data.message);\r\n    } catch (error) {\r\n      console.error('Signup error:', error);\r\n      setmessage(null);\r\n      // Handle signup error (e.g., display error message to the user)\r\n    }\r\n  };\r\n\r\n  const logout = async () => {\r\n    try {\r\n      // Make a POST request to your backend logout endpoint to invalidate the user session\r\n      await axios.post('http://localhost:5000/api/logout');\r\n      // Clear the user state upon successful logout\r\n      setUser(null);\r\n      SetisLoggedIn('false');\r\n    } catch (error) {\r\n      console.error('Logout error:', error);\r\n      // Handle logout error (e.g., display error message to the user)\r\n    }\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={{ user, login, signup, logout,message,isLoggedIn }}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};"],"mappings":";;;AAAA;AACA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,QAAQ,OAAO;AAClE,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,WAAW,gBAAGN,aAAa,CAAC,CAAC;AAEnC,OAAO,MAAMO,OAAO,GAAGA,CAAA;EAAAC,EAAA;EAAA,OAAMP,UAAU,CAACK,WAAW,CAAC;AAAA;AAACE,EAAA,CAAxCD,OAAO;AAEpB,OAAO,MAAME,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,GAAA;EAC5C,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAM,CAACY,OAAO,EAACC,UAAU,CAAC,GAACb,QAAQ,CAAC,EAAE,CAAC;EACvC,MAAM,CAACc,UAAU,EAACC,aAAa,CAAC,GAACf,QAAQ,CAAC,OAAO,CAAC;EAElD,MAAMgB,KAAK,GAAG,MAAOC,WAAW,IAAK;IACnC,IAAI;MACF;MACA,MAAMC,QAAQ,GAAG,MAAMjB,KAAK,CAACkB,IAAI,CAAC,iCAAiC,EAAEF,WAAW,CAAC;MACjF;MACAN,OAAO,CAACO,QAAQ,CAACE,IAAI,CAACV,IAAI,CAAC;MAC3BG,UAAU,CAACK,QAAQ,CAACE,IAAI,CAACR,OAAO,CAAC;MACjCG,aAAa,CAAC,MAAM,CAAC;IAEvB,CAAC,CAAC,OAAOM,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,cAAc,EAAEA,KAAK,CAAC;MACpCR,UAAU,CAAC,IAAI,CAAC;MAChB;MACAE,aAAa,CAAC,OAAO,CAAC;IAExB;EACF,CAAC;EAED,MAAMQ,MAAM,GAAG,MAAOC,QAAQ,IAAK;IACjC,IAAI;MACF;MACA,MAAMN,QAAQ,GAAG,MAAMjB,KAAK,CAACkB,IAAI,CAAC,kCAAkC,EAAEK,QAAQ,CAAC;MAC/E;MACAb,OAAO,CAACO,QAAQ,CAACE,IAAI,CAACV,IAAI,CAAC;MAC3BG,UAAU,CAACK,QAAQ,CAACE,IAAI,CAACR,OAAO,CAAC;MACjCU,OAAO,CAACG,GAAG,CAACP,QAAQ,CAACE,IAAI,CAACR,OAAO,CAAC;IACpC,CAAC,CAAC,OAAOS,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,eAAe,EAAEA,KAAK,CAAC;MACrCR,UAAU,CAAC,IAAI,CAAC;MAChB;IACF;EACF,CAAC;EAED,MAAMa,MAAM,GAAG,MAAAA,CAAA,KAAY;IACzB,IAAI;MACF;MACA,MAAMzB,KAAK,CAACkB,IAAI,CAAC,kCAAkC,CAAC;MACpD;MACAR,OAAO,CAAC,IAAI,CAAC;MACbI,aAAa,CAAC,OAAO,CAAC;IACxB,CAAC,CAAC,OAAOM,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,eAAe,EAAEA,KAAK,CAAC;MACrC;IACF;EACF,CAAC;EAED,oBACElB,OAAA,CAACC,WAAW,CAACuB,QAAQ;IAACC,KAAK,EAAE;MAAElB,IAAI;MAAEM,KAAK;MAAEO,MAAM;MAAEG,MAAM;MAACd,OAAO;MAACE;IAAW,CAAE;IAAAN,QAAA,EAC7EA;EAAQ;IAAAqB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B,CAAC;AAACvB,GAAA,CAxDWF,YAAY;AAAA0B,EAAA,GAAZ1B,YAAY;AAAA,IAAA0B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}