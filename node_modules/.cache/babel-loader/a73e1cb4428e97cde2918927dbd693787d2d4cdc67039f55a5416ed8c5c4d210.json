{"ast":null,"code":"var _jsxFileName = \"D:\\\\clgproject\\\\src\\\\components\\\\navbar_seller\\\\resetpass.js\",\n  _s = $RefreshSig$();\n// ResetPassword.js\nimport React, { useEffect, useState, useRef } from 'react';\nimport { useAuthh } from '../../providersell/AuthProvidersell';\nimport { useNavigate } from 'react-router-dom';\nimport './reset.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ResetPassword = ({\n  setIsLoginOpen\n}) => {\n  _s();\n  const [email, setEmail] = useState('');\n  const [newPassword, setNewPassword] = useState('');\n  const [confirmPassword, setConfirmPassword] = useState('');\n  const {\n    resetPassword,\n    message,\n    resetRedirectToResetPassword,\n    clearMessage\n  } = useAuthh();\n  const loginRef = useRef(null);\n  const navigate = useNavigate();\n  useEffect(() => {\n    const handleOutsideClick = event => {\n      if (loginRef.current && !loginRef.current.contains(event.target)) {\n        setIsLoginOpen(false);\n        clearMessage();\n      }\n    };\n    document.addEventListener('mousedown', handleOutsideClick);\n    return () => {\n      document.removeEventListener('mousedown', handleOutsideClick);\n    };\n  }, [setIsLoginOpen, clearMessage]);\n  useEffect(() => {\n    resetRedirectToResetPassword();\n  }, [resetRedirectToResetPassword]);\n  const handleResetPassword = async () => {\n    if (newPassword !== confirmPassword) {\n      alert(\"Passwords don't match\");\n      return;\n    }\n    await resetPassword(email, newPassword, confirmPassword);\n  };\n  if (message === 'Password reset successfully') {\n    return navigate('seller/login');\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"blur-background\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"reset-password-container\",\n      ref: loginRef,\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Reset Password\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"reset-password-form\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"email\",\n          placeholder: \"Email\",\n          value: email,\n          onChange: e => setEmail(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"password\",\n          placeholder: \"New Password\",\n          value: newPassword,\n          onChange: e => setNewPassword(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"password\",\n          placeholder: \"Confirm Password\",\n          value: confirmPassword,\n          onChange: e => setConfirmPassword(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleResetPassword,\n          children: \"Reset Password\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 7\n        }, this), message && /*#__PURE__*/_jsxDEV(\"p\", {\n          children: message\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 19\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n};\n_s(ResetPassword, \"WJMwe5vPVb9XDdZFF6AkWz17kfo=\", false, function () {\n  return [useAuthh, useNavigate];\n});\n_c = ResetPassword;\nexport default ResetPassword;\nvar _c;\n$RefreshReg$(_c, \"ResetPassword\");","map":{"version":3,"names":["React","useEffect","useState","useRef","useAuthh","useNavigate","jsxDEV","_jsxDEV","ResetPassword","setIsLoginOpen","_s","email","setEmail","newPassword","setNewPassword","confirmPassword","setConfirmPassword","resetPassword","message","resetRedirectToResetPassword","clearMessage","loginRef","navigate","handleOutsideClick","event","current","contains","target","document","addEventListener","removeEventListener","handleResetPassword","alert","className","children","ref","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","value","onChange","e","onClick","_c","$RefreshReg$"],"sources":["D:/clgproject/src/components/navbar_seller/resetpass.js"],"sourcesContent":["// ResetPassword.js\r\nimport React, { useEffect, useState ,useRef} from 'react';\r\nimport { useAuthh } from '../../providersell/AuthProvidersell';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport './reset.css'\r\n\r\nconst ResetPassword = ({setIsLoginOpen}) => {\r\n  const [email, setEmail] = useState('');\r\n  const [newPassword, setNewPassword] = useState('');\r\n  const [confirmPassword, setConfirmPassword] = useState('');\r\n  const { resetPassword, message,resetRedirectToResetPassword ,clearMessage} = useAuthh();\r\n  const loginRef = useRef(null);\r\n\r\n  const navigate =useNavigate ();\r\n\r\n\r\n  useEffect(() => {\r\n    const handleOutsideClick = (event) => {\r\n      if (loginRef.current && !loginRef.current.contains(event.target)) {\r\n        setIsLoginOpen(false);\r\n       clearMessage();\r\n\r\n      }\r\n    };\r\n  \r\n    document.addEventListener('mousedown', handleOutsideClick);\r\n\r\n    return () => {\r\n      document.removeEventListener('mousedown', handleOutsideClick);\r\n    };\r\n  }, [setIsLoginOpen,clearMessage]);\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  useEffect(()=> {\r\n    resetRedirectToResetPassword();\r\n  },[ resetRedirectToResetPassword]);\r\n \r\n  const handleResetPassword = async () => {\r\n    if (newPassword !== confirmPassword) {\r\n      alert(\"Passwords don't match\");\r\n      return;\r\n    }\r\n    await resetPassword(email, newPassword, confirmPassword);\r\n  };\r\n\r\n  if(message==='Password reset successfully'){\r\n    return     navigate ('seller/login');\r\n  }\r\n\r\n\r\n  return (\r\n    <div className=\"blur-background\">\r\n    <div  className=\"reset-password-container\" ref={loginRef}>\r\n      <h2>Reset Password</h2>\r\n      <div className='reset-password-form'>\r\n      <input type=\"email\" placeholder=\"Email\" value={email} onChange={(e) => setEmail(e.target.value)} />\r\n      <input type=\"password\" placeholder=\"New Password\" value={newPassword} onChange={(e) => setNewPassword(e.target.value)} />\r\n      <input type=\"password\" placeholder=\"Confirm Password\" value={confirmPassword} onChange={(e) => setConfirmPassword(e.target.value)} />\r\n      <button onClick={handleResetPassword}>Reset Password</button>\r\n      {message && <p>{message}</p>}\r\n      </div>\r\n    </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ResetPassword;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}